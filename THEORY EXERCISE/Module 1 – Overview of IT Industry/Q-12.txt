Q-12. Layers in Software Architecture.
Ans:- In software architecture, the system is often organized into different layers, each responsible for specific tasks. Each layer 
      interacts with the one above or below it, providing clear separation of concerns and better maintainability. Here's an overview of 
      common layers in software architecture:

Common Layers in Software Architecture:
----------------------------------------------------------------------------------------------------------------------------------------
1.Presentation Layer (User Interface Layer)

Purpose: This layer handles everything related to user interaction. It presents data to the user and processes user input.
Components: Web pages, mobile screens, forms, buttons.
Example: A login page or a dashboard in a web app.

2.Application Layer (Business Logic Layer)

Purpose: Contains the core logic of the application. It processes user requests, makes decisions, and performs operations based on business rules.
Components: Services, controllers, use cases, business rules.
Example: In an e-commerce site, this layer would handle adding products to the cart and calculating totals.

3.Data Layer (Persistence Layer)

Purpose: Manages data storage, retrieval, and manipulation. It interacts with databases or external data sources to store and fetch data.
Components: Database systems, file systems, or APIs that interact with external data sources.
Example: SQL database, NoSQL database, or cloud storage.

4.Integration Layer (Optional)

Purpose: This layer is responsible for handling communication between external systems or services (like third-party APIs or
         microservices).
Components: APIs, message queues, middleware.
Example: Payment gateway integrations, external data APIs.

    Benefits of Layered Architecture:
----------------------------------------------------------------------------------------------------------------------------------------
            Separation of Concerns: Each layer focuses on a specific task, making the system easier to manage.
            Maintainability: Changes in one layer (like switching to a new database) do not require changes in other layers.
            Reusability: Components in one layer can be reused by other layers or in different systems.
            Scalability: Layers can be scaled independently, especially in microservices architectures.
            Security: Layers can be secured separately, providing better protection against unauthorized access.

Simple Example:
    Imagine a restaurant:

        Presentation Layer: The waiter (user interface) interacts with customers and takes orders.
        Application Layer: The kitchen (business logic) prepares the food based on the order.
        Data Layer: The pantry (data storage) stores ingredients and retrieves them when needed.

Why Are Layers Important in Software Architecture?

Layers in software architecture are important because they help organize and separate concerns within the system. By dividing 
the software into layers, each responsible for a specific task, it becomes easier to develop, maintain, and scale the system. 
Hereâ€™s why layers are crucial:

    Key Reasons:
----------------------------------------------------------------------------------------------------------------------------------------
Separation of Concerns
----------------------
Layers separate different responsibilities (e.g., user interface, business logic, data storage). This makes it easier to focus on one aspect of the system at a time without affecting others.
Example: You can change the design of the user interface without impacting the business logic or database.

Maintainability
---------------
With clear layers, it's easier to update or fix specific parts of the system without disrupting the entire application.
Example: If you need to switch to a new database, you can do it in the data layer without affecting the user interface.

Reusability
-----------
Layers allow you to reuse components across different projects or parts of the application.
Example: The business logic layer can be reused across different platforms, like a mobile app and a website.

Scalability
-----------
Each layer can be scaled independently, allowing you to optimize the system for performance. For instance, if the database layer 
is under heavy load, you can scale that layer without affecting other layers.
Example: Scaling the data layer for more storage while leaving the user interface layer the same.

Flexibility
-----------
Layers allow changes to be made in one part of the system without breaking the whole system. For example, switching to a new framework 
for the front end can be done without affecting the back end.
Example: You can replace the database in the data layer with minimal changes to the rest of the system.

Security
--------
Security measures can be applied at different layers. For example, the data layer can have encryption, while the presentation layer can 
have authentication.
Example: Sensitive data can be encrypted in the data layer, while user access can be controlled in the application layer.

Easier Testing
--------------
Layers allow you to test each part of the system separately. Testing individual layers makes it easier to identify and fix bugs.
Example: You can test the business logic layer without worrying about the user interface or data storage.
